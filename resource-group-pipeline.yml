# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Init_Validate_Plan_Terraform
    jobs:
      - job:
        steps:
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            backendType: 'azurerm'
            backendServiceArm: 'Azure-AKS-connection'
            backendAzureRmResourceGroupName: 'Nihal-Training'
            backendAzureRmStorageAccountName: 'nihalstorageaccounts'
            backendAzureRmContainerName: 'terraformremotestate'
            backendAzureRmKey: 'rg/terraform.tfstate'
            allowTelemetryCollection: false
          
        - task: TerraformCLI@0
          inputs:
            command: 'validate'
            workingDirectory: '$(Build.ArtifactStagingDirectory)'
            allowTelemetryCollection: false
        
        - task: TerraformCLI@0
          inputs:
            command: 'plan'
            environmentServiceName: 'Azure-AKS-connection'
            allowTelemetryCollection: false

  - stage: Init_Apply_Terraform
    jobs:
      - job:
        steps:
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            backendType: 'azurerm'
            backendServiceArm: 'Azure-AKS-connection'
            ensureBackend: false
            backendAzureRmResourceGroupName: 'Nihal-Training'
            backendAzureRmResourceGroupLocation: 'Australia East'
            backendAzureRmStorageAccountName: 'nihalstorageaccounts'
            backendAzureRmContainerName: 'terraformremotestate'
            backendAzureRmKey: 'rg/terraform.tfstate'
            allowTelemetryCollection: false

        - task: TerraformCLI@0
          inputs:
            command: 'apply'
            environmentServiceName: 'Azure-AKS-connection'
            allowTelemetryCollection: false
